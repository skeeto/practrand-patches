--- a/tools/RNG_output.cpp
+++ b/tools/RNG_output.cpp
@@ -13,7 +13,7 @@
 //#include <map>
 #include <signal.h>     /* signal, sig_atomic_t */
 
-#ifdef WIN32 // needed to allow binary stdout on windows
+#ifdef _WIN32 // needed to allow binary stdout on windows
 #include <fcntl.h>
 #include <io.h>
 #endif
@@ -82,7 +82,7 @@
 #include "SeedingTester.h"
 
 int main(int argc, char **argv) {
-#ifdef WIN32
+#ifdef _WIN32
 	_setmode( _fileno(stdout), _O_BINARY); // needed to allow binary stdout on windows
 #endif
 	if (argc < 3 || argc > 4) print_usage(argv[0]);
--- a/tools/RNG_test.cpp
+++ b/tools/RNG_test.cpp
@@ -30,7 +30,7 @@
 #include "PractRand/RNGs/other/indirection.h"
 #include "PractRand/RNGs/other/special.h"
 
-#ifdef WIN32 // needed to allow binary stdin on windows
+#ifdef _WIN32 // needed to allow binary stdin on windows
 #include <fcntl.h>
 #include <io.h>
 #endif
@@ -492,7 +492,7 @@
 int main(int argc, char **argv) {
 	PractRand::initialize_PractRand();
 	std::printf("RNG_test using PractRand version %s\n", PractRand::version_str);
-#ifdef WIN32 // needed to allow binary stdin on windows
+#ifdef _WIN32 // needed to allow binary stdin on windows
 	_setmode( _fileno(stdin), _O_BINARY);
 #endif
 	if (argc <= 1) {
--- a/tools/multithreading.h
+++ b/tools/multithreading.h
@@ -1,7 +1,7 @@
 
 //the interface:
 
-#if defined WIN32
+#if defined _WIN32
 #define THREADFUNC_CALLING_CONVENTION __stdcall
 #define THREADFUNC_RETURN_TYPE unsigned long
 #else 
@@ -37,8 +37,8 @@
 
 //the implementation details:
 
-#if defined WIN32
-#include <Windows.h>
+#if defined _WIN32
+#include <windows.h>
 namespace Threading {
 	//compile time assert that Lock is big enough:
 	typedef char compile_time_assertion[(sizeof(Lock) >= sizeof(CRITICAL_SECTION)) ? 1 : -1];
